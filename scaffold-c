#!/bin/bash

display_help() {
    help_file=$HOME/scripts/scaffold-c-files/help.md
    if [ -z "$PAGER" ]; then
        cat $help_file 1>&2
    else
        $PAGER $help_file 1>&2
    fi
}

TEMP=$(getopt -o h --long help,dry-run -n 'scaffold-c' -- "$@")
eval set -- "$TEMP"

# Default values

# Global options parsing
while true; do
    case "$1" in
    -h | --help)
        display_help
        exit 0
        ;;
    --)
        shift
        break
        ;;
    *)
        echo -e "\033[31mOption ERROR: $1" 1>&2
        exit 1
        ;;
    esac
done

# Check if the required arguments are present
if [ $# -lt 2 ]; then
    echo -e "\033[31mMissing argument: <CMD> <PATH>\033[0m"
    exit 1
fi

# Assign the positional parameters to variables
cmd=$1
path=$2
shift 2 # Remove the first two positional parameters

# Define the 'create' function
create() {
    # Default values
    dry_run=false # TODO: implement
    force=false
    git=true
    project_name=$(basename "$path")

    # Parse optional arguments
    TEMP=$(getopt -o f --long force,project-name:,no-git,dry-run -n 'scaffold-cd' -- "$@")
    eval set -- "$TEMP"

    while true; do
        case "$1" in
        -f | --force)
            force=true
            shift
            ;;
        --project-name)
            project_name="$2"
            shift 2
            ;;
        --no-git)
            git=false
            shift
            ;;
        --dry-run)
            dry_run=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo -e "\033[31mOption ERROR: $1" 1>&2
            exit 1
            ;;
        esac
    done

    echo -e "\033[33m# Creating C project at path: [ \033[34m$path\033[0m\033[33m ]\033[0m"
    echo -e "\033[33m# Project name: [ \033[34m$project_name\033[0m\033[33m ]\033[0m"
    echo ""

    # Create the project directory
    if [ -d "$path" -a "$path" != "." ]; then
        echo -e "\033[31m* WARNING: [ \033[34m$path\033[0m\033[31m ] already exists\033[0m"
        if [ ! "$force" ]; then
            echo -n -e "\033[31m-> Would you like to overwrite it? [y/N]\033[0m "
            read -r overwrite
            if [ "$overwrite" != "y" ]; then
                echo -e "\033[31m-> \033[33mAborting...\033[0m"
                exit 1
            fi
        fi
        echo -e "\033[31m-> \033[32mOverwriting...\033[0m"
        rm -rf "$path"
    fi

    mkdir -p "$path"

    mkdir -p "$path/src"
    mkdir -p "$path/include"
    mkdir -p "$path/lib"

    touch "$path/include/.gitkeep"
    touch "$path/lib/.gitkeep"

    cp $HOME/scripts/scaffold-c-files/CMakeLists.txt "$path/CMakeLists.txt"
    sed -i "s|PROJECT_NAME|$project_name|g" "$path/CMakeLists.txt"
    cp $HOME/scripts/scaffold-c-files/build.sh "$path/build.sh"
    chmod +x "$path/build.sh"

    cp $HOME/scripts/scaffold-c-files/main.c "$path/src/main.c"
    cp $HOME/scripts/scaffold-c-files/.gitignore "$path/.gitignore"
    cp $HOME/scripts/scaffold-c-files/README.md "$path/README.md"
    sed -i "s|PROJECT_NAME|$project_name|g" "$path/README.md"
    cp $HOME/scripts/scaffold-c-files/colors.h "$path/include/colors.h"

    if [ "$git" ]; then
        git -C "$path" init
        git -C "$path" add .
        git -C "$path" commit -m "Initial commit"
    fi
}

add() {
    # Parse the required arguments
    name=$1

    echo -e "\033[33m# Adding file/header to C project at path: [ \033[34m$path\033[0m\033[33m ]\033[0m"
    echo ""
    echo -e "\033[33m# Name: [ \033[34m$name\033[0m\033[33m ]\033[0m"

    touch "$path/src/$name.c"
    touch "$path/include/$name.h"

    echo "#include \"$name.h\"" >>"$path/src/$name.c"
    echo "" >>"$path/src/$name.c"

    echo "#ifndef __${name^^}_H__" >>"$path/include/$name.h"
    echo "#define __${name^^}_H__" >>"$path/include/$name.h"
    echo "" >>"$path/include/$name.h"
    echo "#endif // __${name^^}_H__" >>"$path/include/$name.h"
}

# Main script logic
case $cmd in
create)
    create "$@"
    ;;
add)
    add "$@"
    ;;
*)
    echo -e "\033[31mInvalid command: [ \033[34m$cmd\033[0m\033[31m ]\033[0m"
    exit 1
    ;;
esac
